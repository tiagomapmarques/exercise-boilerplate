#!/usr/bin/env node
/** biome-ignore-all lint/suspicious/noConsole: Useful as this is a script */
import { exec } from 'node:child_process';
import { readFileSync } from 'node:fs';

const packageJsonFile = `${import.meta.dirname}/../package.json`;
const dockerFile = `${import.meta.dirname}/../Dockerfile`;
const nvmrcFile = `${import.meta.dirname}/../.nvmrc`;

let warningsOrInfo = false;
const warn = (...args) => {
  warningsOrInfo = true;
  args
    .join(' ')
    .split('\n')
    .forEach((line) => {
      console.log('\x1b[43m%s\x1b[0m', ' WARN ', line);
    });
};
const info = (...args) => {
  warningsOrInfo = true;
  args
    .join(' ')
    .split('\n')
    .forEach((line) => {
      console.log('\x1b[34m%s\x1b[0m', '_INFO_', line);
    });
};
const execAsync = (command) =>
  new Promise((resolve) => {
    exec(command, (_error, stdout) => resolve(stdout));
  });

const getInternetVersions = async () => {
  const fetchPnpm = async () => {
    const output = await execAsync('pnpm self-update 9001');

    const latestLine =
      output
        .split('\n')
        .filter((line) => line.includes('latest-'))
        .pop() || '';

    const latest = latestLine.split(': ').pop() || '';

    return { latest, lts: latest };
  };

  const fetchNode = async () => {
    const response = await fetch(
      'https://nodejs.org/download/release/index.json',
    );
    const data = await response.json();
    return {
      latest: data.find((item) => !item.lts)?.version.slice(1),
      lts: data.find((item) => item.lts)?.version.slice(1),
    };
  };

  const [node, pnpm] = await Promise.all([fetchNode(), fetchPnpm()]);

  return { node, pnpm };
};

const getLocalVersions = () => {
  const { engines } = JSON.parse(readFileSync(packageJsonFile).toString());

  const [latestNode, ltsNode] = engines.node
    .replaceAll('^', '')
    .split('||')
    .map((version) => version.trim());

  const [latestPnpm, ltsPnpm] = engines.pnpm
    .replaceAll('^', '')
    .split('||')
    .map((version) => version.trim());

  return {
    node: { latest: latestNode, lts: ltsNode },
    pnpm: { latest: latestPnpm, lts: ltsPnpm },
  };
};

const getDockerVersions = () => {
  const dockerContent = readFileSync(dockerFile).toString();

  const [nodeMatch] = /FROM node:\d+.\d+.\d+/.exec(dockerContent);
  const nodeVersion = nodeMatch.slice('FROM node:'.length);

  const [pnpmMatch] = / pnpm@\d+.\d+.\d+/.exec(dockerContent);
  const pnpmVersion = pnpmMatch.slice(' pnpm@'.length);

  return {
    node: { latest: nodeVersion },
    pnpm: { latest: pnpmVersion },
  };
};

const internet = await getInternetVersions();
const local = getLocalVersions();
const docker = getDockerVersions();
const nvmrc = {
  node: {
    latest: readFileSync(nvmrcFile).toString().trim().slice(1),
  },
};

const semverToNumber = (semver, maxDigits = 4, semverSize = 3) => {
  const semverSplit = semver.split('.').map((value) => value.split('-')[0]);
  const semverParsed = [...new Array(semverSize)]
    .fill()
    .map((_, index) => `${semverSplit[index] || 0}`);
  const prefix = [...new Array(maxDigits)]
    .fill()
    .reduce((index) => `${index}0`, '');

  return Number(
    semverParsed
      .map((value = '0') => `${prefix}${value}`.slice(-maxDigits))
      .join(''),
  );
};

const compareVersions = (name, current, latest) => {
  if (!current) {
    return;
  }

  const isImportant = name.includes(' ');
  const currentNumber = semverToNumber(current);
  const latestNumber = semverToNumber(latest);
  const logger = isImportant ? warn : info;

  if (latestNumber > currentNumber) {
    logger(`New ${name} version available: ${latest} (current: ${current})`);
  } else if (latestNumber < currentNumber) {
    warn(`Current version of ${name} (${current}) is not valid.`);
  }
};

const lowestLocalNode = local.node.lts || local.node.latest;
const lowestLocalPnpm = local.pnpm.lts || local.pnpm.latest;

// Compare non-LTS versions
compareVersions('node', local.node.latest, internet.node.latest);
compareVersions('pnpm', local.pnpm.latest, internet.pnpm.latest);

// Compare LTS versions
compareVersions('node LTS', local.node.lts, internet.node.lts);
compareVersions('pnpm LTS', local.pnpm.lts, internet.pnpm.lts);

// Check if project versions are in sync
if (!warningsOrInfo) {
  // Dockerfile
  compareVersions('node (Dockerfile)', docker.node.latest, lowestLocalNode);
  compareVersions('pnpm (Dockerfile)', docker.pnpm.latest, lowestLocalPnpm);

  // Nvm
  compareVersions('node (.nvmrc)', nvmrc.node.latest, lowestLocalNode);

  if (!warningsOrInfo) {
    console.log('No engine updates found');
  }
}
